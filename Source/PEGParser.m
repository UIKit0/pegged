//
//  Generated by pegged 0.5.0.
//  Fork: https://github.com/hydrixos/pegged
//

#import "PEGParser.h"

#import "Compiler.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef matchDEBUG
	#define yydebug(...)		{ NSLog(__VA_ARGS__); }
	#define yyprintf(...)		{ yydebug(__VA_ARGS__); NSLog(@" at %@", [self positionDescriptionForIndex: _index]); }
#else
	#define yydebug(...)
	#define yyprintf(...)
#endif


NSString *PEGParserErrorStringIndexKey	= @"PEGParserErrorStringIndex";
NSString *PEGParserErrorStringKey			= @"PEGParserErrorString";

#pragma mark - Internal types

// A block implementing a certain parsing rule
typedef BOOL (^PEGParserRule)(PEGParser *parser, NSInteger *localCaptures);

// A block implementing a certain parser action
typedef id (^PEGParserAction)(PEGParser *self, NSString *text);


/*!
 @abstract Internally used class for storing captured text results for actions.
 */
@interface PEGParserCapture : NSObject

// The position index used for text capturing
@property NSUInteger begin;
@property NSUInteger end;

// The action associated with a capture
@property (copy) PEGParserAction action;

// The count of captured results available to an action
@property NSInteger capturedResultsCount;

// All results captured by the action
@property NSArray *allResults;

// The index of the next result to be read by the action
@property NSInteger nextIndex;

@end

@implementation PEGParserCapture
@end


/*!
 @abstract Internal parser methods
 */
@interface PEGParser ()
{
	// The last error state
	NSError *_lastError;
	
	// The rule set used by the parser
	NSMutableDictionary *_rules;
	
	// The current string position
	const char *_cstring;
	NSUInteger _index;
	NSUInteger _limit;
	
	// Specifies whether the parser is currently capturing
	BOOL _capturing;
	
	// All currently matched captures
	NSMutableArray *_captures;
	
	// The results of the last actions
	NSMutableArray *_actionResults;

	// The capture of the currently performed action
	PEGParserCapture *_currentCapture;
}

// Public parser state information
@property (readonly) NSUInteger captureStart;
@property (readonly) NSUInteger captureEnd;
@property (readonly) NSString* string;

@end


@implementation PEGParser

- (id)init
{
    self = [super init];
    
    if (self)
    {
        _rules = [NSMutableDictionary new];
        _captures = [NSMutableArray new];
		_actionResults = [NSMutableArray new];
		
		[self addRule:__AND withName:@"AND"];
		[self addRule:__AT withName:@"AT"];
		[self addRule:__Action withName:@"Action"];
		[self addRule:__BEGIN withName:@"BEGIN"];
		[self addRule:__CIRCUMFLEX withName:@"CIRCUMFLEX"];
		[self addRule:__CLOSE withName:@"CLOSE"];
		[self addRule:__Char withName:@"Char"];
		[self addRule:__Class withName:@"Class"];
		[self addRule:__Code withName:@"Code"];
		[self addRule:__Comment withName:@"Comment"];
		[self addRule:__DOT withName:@"DOT"];
		[self addRule:__Declaration withName:@"Declaration"];
		[self addRule:__Definition withName:@"Definition"];
		[self addRule:__END withName:@"END"];
		[self addRule:__Effect withName:@"Effect"];
		[self addRule:__EndOfDecl withName:@"EndOfDecl"];
		[self addRule:__EndOfFile withName:@"EndOfFile"];
		[self addRule:__EndOfLine withName:@"EndOfLine"];
		[self addRule:__Expression withName:@"Expression"];
		[self addRule:__ExtraCode withName:@"ExtraCode"];
		[self addRule:__Fail withName:@"Fail"];
		[self addRule:__GlobalImportIdentifier withName:@"GlobalImportIdentifier"];
		[self addRule:__Grammar withName:@"Grammar"];
		[self addRule:__HorizSpace withName:@"HorizSpace"];
		[self addRule:__IMPORT withName:@"IMPORT"];
		[self addRule:__IdentCont withName:@"IdentCont"];
		[self addRule:__IdentStart withName:@"IdentStart"];
		[self addRule:__Identifier withName:@"Identifier"];
		[self addRule:__ImportIdentifier withName:@"ImportIdentifier"];
		[self addRule:__LEFTARROW withName:@"LEFTARROW"];
		[self addRule:__Literal withName:@"Literal"];
		[self addRule:__LocalImportIdentifier withName:@"LocalImportIdentifier"];
		[self addRule:__NOT withName:@"NOT"];
		[self addRule:__OPEN withName:@"OPEN"];
		[self addRule:__OPTION withName:@"OPTION"];
		[self addRule:__PERCENT withName:@"PERCENT"];
		[self addRule:__PLUS withName:@"PLUS"];
		[self addRule:__PROPERTY withName:@"PROPERTY"];
		[self addRule:__Prefix withName:@"Prefix"];
		[self addRule:__Primary withName:@"Primary"];
		[self addRule:__PropIdentifier withName:@"PropIdentifier"];
		[self addRule:__PropParamaters withName:@"PropParamaters"];
		[self addRule:__QUESTION withName:@"QUESTION"];
		[self addRule:__Range withName:@"Range"];
		[self addRule:__SLASH withName:@"SLASH"];
		[self addRule:__STAR withName:@"STAR"];
		[self addRule:__Sequence withName:@"Sequence"];
		[self addRule:__Space withName:@"Space"];
		[self addRule:__Spacing withName:@"Spacing"];
		[self addRule:__Suffix withName:@"Suffix"];

    }
    
    return self;
}



#pragma mark - String matching

- (void)beginCapture
{
    if (_capturing) _captureStart = _index;
}

- (void)endCapture
{
    if (_capturing) _captureEnd = _index;
}

- (BOOL)invertWithCaptures:(NSInteger *)localCaptures block:(PEGParserRule)rule
{
	NSInteger temporaryCaptures = *localCaptures;
	
	// We are in an error state. Just stop.
	if (_lastError)
		return NO;
	
    BOOL matched = ![self matchOneWithCaptures:&temporaryCaptures block:rule];
	if (matched)
		*localCaptures = temporaryCaptures;
	
	return matched;
}

- (BOOL)lookAheadWithCaptures:(NSInteger *)localCaptures block:(PEGParserRule)rule
{
    NSUInteger index=_index;

	// We are in an error state. Just stop.
	if (_lastError)
		return NO;
	
    BOOL capturing = _capturing;
    _capturing = NO;
	
	NSInteger temporaryCaptures = *localCaptures;
	
    BOOL matched = rule(self, &temporaryCaptures);
    _capturing = capturing;
    _index=index;
	_lastError = nil;
	
    return matched;
}

- (BOOL)matchDot
{
    if (_index >= _limit)
		return NO;
	
    ++_index;
    return YES;
}

- (BOOL)matchOneWithCaptures:(NSInteger *)localCaptures block:(PEGParserRule)rule
{
	// We are in an error state. Just stop.
	if (_lastError)
		return NO;
	
    NSUInteger index=_index, captureCount=[_captures count];
	NSInteger temporaryCaptures = *localCaptures;
	
	// Try to match
    if (rule(self, &temporaryCaptures)) {
		*localCaptures = temporaryCaptures;
        return YES;
	}
	
	// Restore old state
    _index=index;
	
    if ([_captures count] > captureCount) {
        NSRange rangeToRemove = NSMakeRange(captureCount, [_captures count]-captureCount);
        [_captures removeObjectsInRange:rangeToRemove];
    }
	
    return NO;
}

- (BOOL)matchManyWithCaptures:(NSInteger *)localCaptures block:(PEGParserRule)rule
{
	// We are in an error state. Just stop.
	if (_lastError)
		return NO;
	
	// We need at least one match
    if (![self matchOneWithCaptures:localCaptures block:rule])
        return NO;
	
	// Match others
    while ([self matchOneWithCaptures:localCaptures block:rule])
		;
    
	return YES;
}

- (BOOL)matchRule:(NSString *)ruleName asserted:(BOOL)asserted
{
    NSArray *rules = [_rules objectForKey: ruleName];

	// We are in an error state. Just stop.
	if (_lastError)
		return NO;
    
	if (![rules count])
        NSLog(@"Couldn't find rule name \"%@\".", ruleName);
	
	for (PEGParserRule rule in rules) {
		NSInteger localCaptures = 0;
		
		if ([self matchOneWithCaptures:&localCaptures block:rule])
			return YES;
	}

	if (asserted)
		[self setErrorWithMessage: [NSString stringWithFormat: @"Unmatched%@", ruleName]];
	
    return NO;
}

- (BOOL)matchString:(char *)literal asserted:(BOOL)asserted
{
	NSInteger saved = _index;

	while (*literal) {
		if ((_index >= _limit) || (_cstring[_index] != *literal)) {
			_index = saved;
			
			if (asserted)
				[self setErrorWithMessage: [NSString stringWithFormat: @"Missing:%s", literal]];
			
			return NO;
		}
		++literal;
		++_index;
	}

    return YES;
}

- (BOOL)matchClass:(unsigned char *)bits
{
    if (_index >= _limit) return NO;
	
    int c = [_string characterAtIndex:_index];
    
	if (bits[c >> 3] & (1 << (c & 7))) {
        ++_index;
        yyprintf(@"  ok   matchClass");
        return YES;
    }
	
    yyprintf(@"  fail matchClass");
    return NO;
}

- (void)setErrorWithMessage:(NSString *)message
{
	if (!_lastError)
		_lastError = [NSError errorWithDomain:NSCocoaErrorDomain code:0 userInfo:@{NSLocalizedDescriptionKey: message, PEGParserErrorStringIndexKey: @(_index), PEGParserErrorStringKey: _string}];;
}



#pragma mark - Action handling

- (void)performActionUsingCaptures:(NSInteger)captures block:(PEGParserAction)action
{
    PEGParserCapture *capture = [PEGParserCapture new];
    
	capture.begin = _captureStart;
    capture.end = _captureEnd;
    
	capture.action = action;
	
	capture.capturedResultsCount = captures;

    [_captures addObject:capture];
}

- (void)pushResult:(id)result
{
	[_actionResults addObject: result];
}

- (id)nextResult
{
	return [_currentCapture.allResults objectAtIndex: _currentCapture.nextIndex++];
}

- (id)nextResultOrNil
{
	if (_currentCapture.allResults.count >= _currentCapture.nextIndex)
		return nil;
	
	return [self nextResult];
}

- (id)resultAtIndex:(NSInteger)index
{
	return [_currentCapture.allResults objectAtIndex: index];
}

- (NSInteger)resultCount
{
	return _currentCapture.capturedResultsCount;
}

- (NSArray *)allResults
{
	return _currentCapture.allResults;
}


#pragma mark - Rule definitions

- (void)addRule:(PEGParserRule)rule withName:(NSString *)name
{
    NSMutableArray *rules = [_rules objectForKey:name];
    if (!rules) {
        rules = [NSMutableArray new];
        [_rules setObject:rules forKey:name];
    }
    
    [rules addObject:rule];
}

static PEGParserRule __AND = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'AND'\n");
	
	if (![parser matchString: "&" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __AT = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'AT'\n");
	
	if (![parser matchString: "@" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __Action = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Action'\n");
	
	if (![parser matchString: "{" asserted:NO])
		return NO;
	
	[parser beginCapture];
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchClass: (unsigned char *)"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"])
			return NO;
		return YES;
	}];
	
	[parser endCapture];
	
	if (![parser matchString: "}" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __BEGIN = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'BEGIN'\n");
	
	if (![parser matchString: "<" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __CIRCUMFLEX = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'CIRCUMFLEX'\n");
	
	if (![parser matchString: "^" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __CLOSE = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'CLOSE'\n");
	
	if (![parser matchString: ")" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __Char = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Char'\n");
	
	if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchString: "\\" asserted:NO])
				return NO;
			
			if (![parser matchClass: (unsigned char *)"\000\000\000\000\204\000\000\000\000\000\000\070\000\100\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
				return NO;
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchString: "\\" asserted:NO])
				return NO;
			
			if (![parser matchClass: (unsigned char *)"\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
				return NO;
			
			if (![parser matchClass: (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
				return NO;
			
			if (![parser matchClass: (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
				return NO;
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchString: "\\" asserted:NO])
				return NO;
			
			if (![parser matchClass: (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
				return NO;
			
			[parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser matchClass: (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
					return NO;
				return YES;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchString: "\\x" asserted:NO])
				return NO;
			
			if (![parser matchClass: (unsigned char *)"\000\000\000\000\000\000\377\003\176\000\000\000\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
				return NO;
			
			if (![parser matchClass: (unsigned char *)"\000\000\000\000\000\000\377\003\176\000\000\000\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
				return NO;
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser lookAheadWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if ([parser matchString: "\\" asserted:NO])
					return NO;
			
				return YES;
			}])
				return NO;
			
			if (![parser matchDot])
				return NO;
		
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __Class = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Class'\n");
	
	if (![parser matchString: "[" asserted:NO])
		return NO;
	
	[parser beginCapture];
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser lookAheadWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if ([parser matchString: "]" asserted:NO])
				return NO;
		
			return YES;
		}])
			return NO;
		
		if (![parser matchRule: @"Range" asserted:NO])
			return NO;
	
		return YES;
	}];
	
	[parser endCapture];
	
	if (![parser matchString: "]" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __Code = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Code'\n");
	
	if (![parser matchString: "{{" asserted:NO])
		return NO;
	
	[parser beginCapture];
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchClass: (unsigned char *)"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"])
			return NO;
		return YES;
	}];
	
	[parser endCapture];
	
	if (![parser matchString: "}}" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __Comment = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Comment'\n");
	
	if (![parser matchString: "#" asserted:NO])
		return NO;
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser lookAheadWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if ([parser matchRule: @"EndOfLine" asserted:NO])
				return NO;
		
			return YES;
		}])
			return NO;
		
		if (![parser matchDot])
			return NO;
	
		return YES;
	}];
	
	if (![parser matchRule: @"EndOfLine" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __DOT = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'DOT'\n");
	
	if (![parser matchString: "." asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __Declaration = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Declaration'\n");
	
	if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"OPTION" asserted:NO])
				return NO;
			
			if (![parser matchString: "case-insensitive" asserted:NO])
				return NO;
			
			[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser matchRule: @"HorizSpace" asserted:NO])
					return NO;
				return YES;
			}];
			
			if (![parser matchRule: @"EndOfDecl" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 self.compiler.caseInsensitive = YES;
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"OPTION" asserted:NO])
				return NO;
			
			if (![parser matchString: "match-debug" asserted:NO])
				return NO;
			
			[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser matchRule: @"HorizSpace" asserted:NO])
					return NO;
				return YES;
			}];
			
			if (![parser matchRule: @"EndOfDecl" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 self.compiler.matchDebug = YES;
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"IMPORT" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"ImportIdentifier" asserted:NO])
				return NO;
			
			[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser matchRule: @"HorizSpace" asserted:NO])
					return NO;
				return YES;
			}];
			
			if (![parser matchRule: @"EndOfDecl" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedImport:text];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"PROPERTY" asserted:NO])
				return NO;
			
			[parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser matchRule: @"PropParamaters" asserted:NO])
					return NO;
				
				[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
					 [self.compiler parsedPropertyParameters:text];
				
					return nil;
				}];
			
				return YES;
			}];
			
			if (![parser matchRule: @"PropIdentifier" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedPropertyType:text];
			
				return nil;
			}];
			
			[parser beginCapture];
			
			[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser matchString: "*" asserted:NO])
					return NO;
				return YES;
			}];
			
			[parser endCapture];
			
			[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser matchRule: @"HorizSpace" asserted:NO])
					return NO;
				return YES;
			}];
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedPropertyStars:text];
			
				return nil;
			}];
			
			if (![parser matchRule: @"PropIdentifier" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"EndOfDecl" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedPropertyName:text];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"ExtraCode" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __Definition = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Definition'\n");
	
	if (![parser matchRule: @"Identifier" asserted:NO])
		return NO;
	
	[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
		 [self.compiler startRule:text];
	
		return nil;
	}];
	
	if (![parser matchRule: @"LEFTARROW" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Expression" asserted:NO])
		return NO;
	
	[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
		 [self.compiler parsedRule];
	
		return nil;
	}];
	
	return YES;
};

static PEGParserRule __END = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'END'\n");
	
	if (![parser matchString: ">" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __Effect = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Effect'\n");
	
	if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"Code" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedCode:text];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"Action" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedAction:text returnValue:NO];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"CIRCUMFLEX" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"Action" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedAction:text returnValue:YES];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"Fail" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedFail: text];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"BEGIN" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler beginCapture];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"END" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler endCapture];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __EndOfDecl = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'EndOfDecl'\n");
	
	if (![parser matchString: ";" asserted:NO])
		return NO;
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchRule: @"HorizSpace" asserted:NO])
			return NO;
		return YES;
	}];
	
	if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"EndOfLine" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"Comment" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __EndOfFile = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'EndOfFile'\n");
	
	if (![parser lookAheadWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchDot])
			return NO;
	
		return YES;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __EndOfLine = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'EndOfLine'\n");
	
	if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchString: "\r\n" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchString: "\n" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchString: "\r" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __Expression = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Expression'\n");
	
	if (![parser matchRule: @"Sequence" asserted:NO])
		return NO;
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchRule: @"SLASH" asserted:NO])
			return NO;
		
		if (![parser matchRule: @"Sequence" asserted:NO])
			return NO;
		
		[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
			 [self.compiler parsedAlternate];
		
			return nil;
		}];
	
		return YES;
	}];
	
	return YES;
};

static PEGParserRule __ExtraCode = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'ExtraCode'\n");
	
	if (![parser matchString: "%%" asserted:NO])
		return NO;
	
	[parser beginCapture];
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchClass: (unsigned char *)"\377\377\377\377\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"])
			return NO;
		return YES;
	}];
	
	[parser endCapture];
	
	if (![parser matchString: "%%" asserted:NO])
		return NO;
	
	[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
		 [self.compiler parsedExtraCode: text];
	
		return nil;
	}];
	
	return YES;
};

static PEGParserRule __Fail = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Fail'\n");
	
	if (![parser matchString: "@!" asserted:NO])
		return NO;
	
	[parser beginCapture];
	
	if (![parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchClass: (unsigned char *)"\000\000\000\000\000\000\377\003\376\377\377\007\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
			return NO;
		return YES;
	}])
		return NO;
	
	[parser endCapture];
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __GlobalImportIdentifier = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'GlobalImportIdentifier'\n");
	
	[parser beginCapture];
	
	if (![parser matchString: "<" asserted:NO])
		return NO;
	
	if (![parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser lookAheadWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if ([parser matchString: "<" asserted:NO])
				return NO;
		
			return YES;
		}])
			return NO;
		
		if (![parser matchDot])
			return NO;
	
		return YES;
	}])
		return NO;
	
	if (![parser matchString: ">" asserted:NO])
		return NO;
	
	[parser endCapture];
	
	return YES;
};

static PEGParserRule __Grammar = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Grammar'\n");
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchRule: @"Declaration" asserted:NO])
			return NO;
		return YES;
	}];
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	if (![parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchRule: @"Definition" asserted:NO])
			return NO;
		return YES;
	}])
		return NO;
	
	if (![parser matchRule: @"EndOfFile" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __HorizSpace = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'HorizSpace'\n");
	
	if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchString: " " asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchString: "\t" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __IMPORT = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'IMPORT'\n");
	
	if (![parser matchString: "@import" asserted:NO])
		return NO;
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchRule: @"HorizSpace" asserted:NO])
			return NO;
		return YES;
	}];
	
	return YES;
};

static PEGParserRule __IdentCont = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'IdentCont'\n");
	
	if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"IdentStart" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchClass: (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
				return NO;
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __IdentStart = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'IdentStart'\n");
	
	if (![parser matchClass: (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
		return NO;
	
	return YES;
};

static PEGParserRule __Identifier = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Identifier'\n");
	
	[parser beginCapture];
	
	if (![parser matchRule: @"IdentStart" asserted:NO])
		return NO;
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchRule: @"IdentCont" asserted:NO])
			return NO;
		return YES;
	}];
	
	[parser endCapture];
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __ImportIdentifier = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'ImportIdentifier'\n");
	
	if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"LocalImportIdentifier" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"GlobalImportIdentifier" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __LEFTARROW = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'LEFTARROW'\n");
	
	if (![parser matchString: "<-" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __Literal = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Literal'\n");
	
	if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchClass: (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
				return NO;
			
			[parser beginCapture];
			
			[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser lookAheadWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
					if ([parser matchClass: (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
						return NO;
				
					return YES;
				}])
					return NO;
				
				if (![parser matchRule: @"Char" asserted:NO])
					return NO;
			
				return YES;
			}];
			
			[parser endCapture];
			
			if (![parser matchClass: (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
				return NO;
			
			if (![parser matchRule: @"Spacing" asserted:NO])
				return NO;
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchClass: (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
				return NO;
			
			[parser beginCapture];
			
			[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser lookAheadWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
					if ([parser matchClass: (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
						return NO;
				
					return YES;
				}])
					return NO;
				
				if (![parser matchRule: @"Char" asserted:NO])
					return NO;
			
				return YES;
			}];
			
			[parser endCapture];
			
			if (![parser matchClass: (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
				return NO;
			
			if (![parser matchRule: @"Spacing" asserted:NO])
				return NO;
		
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __LocalImportIdentifier = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'LocalImportIdentifier'\n");
	
	[parser beginCapture];
	
	if (![parser matchString: "\"" asserted:NO])
		return NO;
	
	if (![parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser lookAheadWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if ([parser matchString: "\"" asserted:NO])
				return NO;
		
			return YES;
		}])
			return NO;
		
		if (![parser matchDot])
			return NO;
	
		return YES;
	}])
		return NO;
	
	if (![parser matchString: "\"" asserted:NO])
		return NO;
	
	[parser endCapture];
	
	return YES;
};

static PEGParserRule __NOT = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'NOT'\n");
	
	if (![parser matchString: "!" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __OPEN = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'OPEN'\n");
	
	if (![parser matchString: "(" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __OPTION = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'OPTION'\n");
	
	if (![parser matchString: "@option" asserted:NO])
		return NO;
	
	if (![parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchRule: @"HorizSpace" asserted:NO])
			return NO;
		return YES;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __PERCENT = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'PERCENT'\n");
	
	if (![parser matchString: "%" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __PLUS = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'PLUS'\n");
	
	if (![parser matchString: "+" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __PROPERTY = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'PROPERTY'\n");
	
	if (![parser matchString: "@property" asserted:NO])
		return NO;
	
	if (![parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchRule: @"HorizSpace" asserted:NO])
			return NO;
		return YES;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __Prefix = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Prefix'\n");
	
	if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"AND" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"Suffix" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedLookAhead];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"NOT" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"Suffix" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedNegativeLookAhead];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"AND" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"Action" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedLookAhead:text];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"NOT" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"Action" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedNegativeLookAhead:text];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"Suffix" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"Effect" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __Primary = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Primary'\n");
	
	if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"Identifier" asserted:NO])
				return NO;
			
			if (![parser lookAheadWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if ([parser matchRule: @"LEFTARROW" asserted:NO])
					return NO;
			
				return YES;
			}])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedIdentifier:text capturing:NO asserted:NO];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"PERCENT" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"Identifier" asserted:NO])
				return NO;
			
			if (![parser lookAheadWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if ([parser matchRule: @"LEFTARROW" asserted:NO])
					return NO;
			
				return YES;
			}])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedIdentifier:text capturing:YES asserted:NO];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"AT" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"Identifier" asserted:NO])
				return NO;
			
			if (![parser lookAheadWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if ([parser matchRule: @"LEFTARROW" asserted:NO])
					return NO;
			
				return YES;
			}])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedIdentifier:text capturing:NO asserted:YES];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"AT" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"PERCENT" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"Identifier" asserted:NO])
				return NO;
			
			if (![parser lookAheadWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if ([parser matchRule: @"LEFTARROW" asserted:NO])
					return NO;
			
				return YES;
			}])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedIdentifier:text capturing:YES asserted:YES];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"OPEN" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"Expression" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"CLOSE" asserted:NO])
				return NO;
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"Literal" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedLiteral:text asserted:NO];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"AT" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"Literal" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedLiteral:text asserted:YES];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"Class" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedClass:text];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"DOT" asserted:NO])
				return NO;
			
			[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
				 [self.compiler parsedDot];
			
				return nil;
			}];
		
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __PropIdentifier = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'PropIdentifier'\n");
	
	[parser beginCapture];
	
	if (![parser matchRule: @"IdentStart" asserted:NO])
		return NO;
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchRule: @"IdentCont" asserted:NO])
			return NO;
		return YES;
	}];
	
	[parser endCapture];
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchRule: @"HorizSpace" asserted:NO])
			return NO;
		return YES;
	}];
	
	return YES;
};

static PEGParserRule __PropParamaters = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'PropParamaters'\n");
	
	[parser beginCapture];
	
	if (![parser matchString: "(" asserted:NO])
		return NO;
	
	if (![parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchClass: (unsigned char *)"\377\377\377\377\377\375\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"])
			return NO;
		return YES;
	}])
		return NO;
	
	if (![parser matchString: ")" asserted:NO])
		return NO;
	
	[parser endCapture];
	
	if (![parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchRule: @"HorizSpace" asserted:NO])
			return NO;
		return YES;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __QUESTION = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'QUESTION'\n");
	
	if (![parser matchString: "?" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __Range = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Range'\n");
	
	if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"Char" asserted:NO])
				return NO;
			
			if (![parser matchString: "-" asserted:NO])
				return NO;
			
			if (![parser matchRule: @"Char" asserted:NO])
				return NO;
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"Char" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __SLASH = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'SLASH'\n");
	
	if (![parser matchString: "/" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __STAR = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'STAR'\n");
	
	if (![parser matchString: "*" asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Spacing" asserted:NO])
		return NO;
	
	return YES;
};

static PEGParserRule __Sequence = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Sequence'\n");
	
	[parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchRule: @"Prefix" asserted:NO])
			return NO;
		return YES;
	}];
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchRule: @"Prefix" asserted:NO])
			return NO;
		
		[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
			 [self.compiler append];
		
			return nil;
		}];
	
		return YES;
	}];
	
	return YES;
};

static PEGParserRule __Space = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Space'\n");
	
	if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchString: " " asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchString: "\t" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if (![parser matchRule: @"EndOfLine" asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static PEGParserRule __Spacing = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Spacing'\n");
	
	[parser matchManyWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser matchRule: @"Space" asserted:NO])
					return NO;
				return YES;
			}])
				return YES;
		
			if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser matchRule: @"Comment" asserted:NO])
					return NO;
				return YES;
			}])
				return YES;
		
			return NO;
		}])
			return NO;
	
		return YES;
	}];
	
	return YES;
};

static PEGParserRule __Suffix = ^(PEGParser *parser, NSInteger *localCaptures){
	yydebug(@"Rule: 'Suffix'\n");
	
	if (![parser matchRule: @"Primary" asserted:NO])
		return NO;
	
	[parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
		if (![parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
			if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser matchRule: @"QUESTION" asserted:NO])
					return NO;
				
				[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
					 [self.compiler parsedQuestion];
				
					return nil;
				}];
			
				return YES;
			}])
				return YES;
		
			if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser matchRule: @"STAR" asserted:NO])
					return NO;
				
				[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
					 [self.compiler parsedStar];
				
					return nil;
				}];
			
				return YES;
			}])
				return YES;
		
			if ([parser matchOneWithCaptures:localCaptures block:^(PEGParser *parser, NSInteger *localCaptures){
				if (![parser matchRule: @"PLUS" asserted:NO])
					return NO;
				
				[parser performActionUsingCaptures:*localCaptures block:^id(PEGParser *self, NSString *text){
					 [self.compiler parsedPlus];
				
					return nil;
				}];
			
				return YES;
			}])
				return YES;
		
			return NO;
		}])
			return NO;
	
		return YES;
	}];
	
	return YES;
};




#pragma mark - Parsing methods

- (NSString *)yyText:(NSUInteger)begin to:(NSUInteger)end
{
    NSInteger len = end - begin;
    if (len <= 0)
        return @"";
    return [_string substringWithRange:NSMakeRange(begin, len)];
}

- (BOOL)parseString:(NSString *)string usingResult:(id *)result
{
	// Prepare parser input
	_string = string;
	#ifndef __PEG_PARSER_CASE_INSENSITIVE__
		_cstring = [_string UTF8String];
	#else
		_cstring = [[_string lowercaseString] UTF8String];
	#endif
		
    // Setup capturing limits
	_limit  = [_string lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    _index  = 0;

	_captureStart= _captureEnd= _index;
    _capturing = YES;
    
	// Do string matching
    BOOL matched = [self matchRule: @"Grammar" asserted:YES];
    
	// Process actions
    if (matched) {
		for (PEGParserCapture *capture in _captures) {
			_currentCapture = capture;

			// Prepare results
			NSInteger resultsCount = _currentCapture.capturedResultsCount;
			NSRange resultsRange = NSMakeRange(_actionResults.count - resultsCount, resultsCount);
			
			if (resultsCount) {
				NSLog(@"%li %@ %li", _actionResults.count, _actionResults, resultsCount);
				
				// Read all results
				capture.allResults = [_actionResults subarrayWithRange: resultsRange];
				capture.nextIndex = 0;
				
				// Remove results from stack
				[_actionResults removeObjectsInRange: resultsRange];
			}
			
			id result = capture.action(self, [self yyText:capture.begin to:capture.end]);
			if (result)
				[self pushResult: result];
		}
		
		// Provide final result if any
		if (_actionResults.count)
			if (result) *result = _actionResults.lastObject;
	}
	
    // Cleanup parser
    _string = nil;
    _cstring = nil;
	_actionResults = nil;
		
	return matched;
}

- (BOOL)parseString:(NSString *)string
{
	return [self parseString:string usingResult:NULL];
}


#pragma mark - Helper methods

- (NSInteger)lineNumberForIndex:(NSInteger)index
{
	__block NSInteger line = 0;
	
	[_string enumerateSubstringsInRange:NSMakeRange(0, index >= _string.length ? _string.length-1 : index) options:NSStringEnumerationByLines|NSStringEnumerationSubstringNotRequired usingBlock:^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) {
		line ++;
	}];
	
	return line;
}

- (NSInteger)columnNumberForIndex:(NSInteger)index
{
	return index - [_string lineRangeForRange: NSMakeRange(index >= _string.length ? _string.length-1 : index, 1)].location;
}

- (NSString *)positionDescriptionForIndex:(NSInteger)index
{
	return [NSString stringWithFormat: @"line: %li, column: %li", [self lineNumberForIndex: index], [self columnNumberForIndex: index]];
}

@end
