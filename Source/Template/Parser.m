//
//  Generated by pegged $Version.
//  Fork: https://github.com/hydrixos/pegged
//

#import "Parser.h"

//!$Imports

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef matchDEBUG
	#define yydebug(...)		{ NSLog(__VA_ARGS__); }
	#define yyprintf(...)		{ yydebug(__VA_ARGS__); NSLog(@" at %@", [self positionDescriptionForIndex: _index]); }
#else
	#define yydebug(...)
	#define yyprintf(...)
#endif


#pragma mark - Internal types

// A block implementing a certain parsing rule
typedef BOOL (^ParserClassRule)(ParserClass *parser, NSInteger *localCaptures);

// A block implementing a certain parser action
typedef id (^ParserClassAction)(ParserClass *self, NSString *text);


/*!
 @abstract Internally used class for storing captured text results for actions.
 */
@interface ParserClassCapture : NSObject

// The position index used for text capturing
@property NSUInteger begin;
@property NSUInteger end;

// The action associated with a capture
@property (copy) ParserClassAction action;

// The count of captured results available to an action
@property NSInteger capturedResultsCount;

// All results captured by the action
@property NSArray *allResults;

// The index of the next result to be read by the action
@property NSInteger nextIndex;

@end

@implementation ParserClassCapture
@end


/*!
 @abstract Internal parser methods
 */
@interface ParserClass ()
{
	// The rule set used by the parser
	NSMutableDictionary *_rules;
	
	// The current string position
	const char *_cstring;
	NSUInteger _index;
	NSUInteger _limit;
	
	// Specifies whether the parser is currently capturing
	BOOL _capturing;
	
	// All currently matched captures
	NSMutableArray *_captures;
	
	// The results of the last actions
	NSMutableArray *_actionResults;

	// The capture of the currently performed action
	ParserClassCapture *_currentCapture;
}

// Public parser state information
@property (readonly) NSUInteger captureStart;
@property (readonly) NSUInteger captureEnd;
@property (readonly) NSString* string;

@end


@implementation ParserClass

- (id)init
{
    self = [super init];
    
    if (self)
    {
        _rules = [NSMutableDictionary new];
        _captures = [NSMutableArray new];
		_actionResults = [NSMutableArray new];
		
		//!$ParserDeclarations
    }
    
    return self;
}



#pragma mark - String matching

- (void)beginCapture
{
    if (_capturing) _captureStart = _index;
}

- (void)endCapture
{
    if (_capturing) _captureEnd = _index;
}

- (BOOL)invertWithCaptures:(NSInteger *)localCaptures block:(ParserClassRule)rule
{
	NSInteger temporaryCaptures = *localCaptures;
	
    BOOL matched = ![self matchOneWithCaptures:&temporaryCaptures block:rule];
	if (matched)
		*localCaptures = temporaryCaptures;
	
	return matched;
}

- (BOOL)lookAheadWithCaptures:(NSInteger *)localCaptures block:(ParserClassRule)rule
{
    NSUInteger index=_index;

    BOOL capturing = _capturing;
    _capturing = NO;
	
	NSInteger temporaryCaptures = *localCaptures;
	
    BOOL matched = rule(self, &temporaryCaptures);
    _capturing = capturing;
    _index=index;
	
    return matched;
}

- (BOOL)matchDot
{
    if (_index >= _limit)
		return NO;
	
    ++_index;
    return YES;
}

- (BOOL)matchOneWithCaptures:(NSInteger *)localCaptures block:(ParserClassRule)rule
{
    NSUInteger index=_index, captureCount=[_captures count];
	NSInteger temporaryCaptures = *localCaptures;
	
	// Try to match
    if (rule(self, &temporaryCaptures)) {
		*localCaptures = temporaryCaptures;
        return YES;
	}
	
	// Restore old state
    _index=index;
	
    if ([_captures count] > captureCount) {
        NSRange rangeToRemove = NSMakeRange(captureCount, [_captures count]-captureCount);
        [_captures removeObjectsInRange:rangeToRemove];
    }
	
    return NO;
}

- (BOOL)matchManyWithCaptures:(NSInteger *)localCaptures block:(ParserClassRule)rule
{
	// We need at least one match
    if (![self matchOneWithCaptures:localCaptures block:rule])
        return NO;
	
	// Match others
    while ([self matchOneWithCaptures:localCaptures block:rule])
		;
    
	return YES;
}

- (BOOL)matchRule:(NSString *)ruleName
{
    NSArray *rules = [_rules objectForKey:ruleName];
    
	if (![rules count])
        NSLog(@"Couldn't find rule name \"%@\".", ruleName);
		
	for (ParserClassRule rule in rules) {
		NSInteger localCaptures = 0;
		
		if ([self matchOneWithCaptures:&localCaptures block:rule])
			return YES;
	}

    return NO;
}

- (BOOL)matchString:(char *)s
{
	NSInteger saved = _index;

	while (*s) {
		if (_index >= _limit) return NO;
		if (_cstring[_index] != *s)
		{
			_index = saved;
			yyprintf(@"  fail matchString '%s'", s);
			return NO;
		}
		++s;
		++_index;
	}

    yyprintf(@"  ok   matchString '%s'", s);
    return YES;
}

- (BOOL)matchClass:(unsigned char *)bits
{
    if (_index >= _limit) return NO;
	
    int c = [_string characterAtIndex:_index];
    
	if (bits[c >> 3] & (1 << (c & 7))) {
        ++_index;
        yyprintf(@"  ok   matchClass");
        return YES;
    }
	
    yyprintf(@"  fail matchClass");
    return NO;
}



#pragma mark - Action handling

- (void)performActionUsingCaptures:(NSInteger)captures block:(ParserClassAction)action
{
    ParserClassCapture *capture = [ParserClassCapture new];
    
	capture.begin = _captureStart;
    capture.end = _captureEnd;
    
	capture.action = action;
	
	capture.capturedResultsCount = captures;

    [_captures addObject:capture];
}

- (void)pushResult:(id)result
{
	[_actionResults addObject: result];
}

- (id)nextResult
{
	return [_currentCapture.allResults objectAtIndex: _currentCapture.nextIndex++];
}

- (id)resultAtIndex:(NSInteger)index
{
	return [_currentCapture.allResults objectAtIndex: index];
}

- (NSInteger)resultCount
{
	return _currentCapture.capturedResultsCount;
}

- (NSArray *)allResults
{
	return _currentCapture.allResults;
}


#pragma mark - Rule definitions

- (void)addRule:(ParserClassRule)rule withName:(NSString *)name
{
    NSMutableArray *rules = [_rules objectForKey:name];
    if (!rules) {
        rules = [NSMutableArray new];
        [_rules setObject:rules forKey:name];
    }
    
    [rules addObject:rule];
}

//!$ParserDefinitions


#pragma mark - Parsing methods

- (NSString *)yyText:(NSUInteger)begin to:(NSUInteger)end
{
    NSInteger len = end - begin;
    if (len <= 0)
        return @"";
    return [_string substringWithRange:NSMakeRange(begin, len)];
}

- (BOOL)parseString:(NSString *)string usingResult:(id *)result
{
	// Prepare parser input
	_string = string;
	#ifndef __PEG_PARSER_CASE_INSENSITIVE__
		_cstring = [_string UTF8String];
	#else
		_cstring = [[_string lowercaseString] UTF8String];
	#endif
		
    // Setup capturing limits
	_limit  = [_string lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    _index  = 0;

	_captureStart= _captureEnd= _index;
    _capturing = YES;
    
	// Do string matching
    BOOL matched = [self matchRule:@"$StartRule"];
    
	// Process actions
    if (matched) {
		for (ParserClassCapture *capture in _captures) {
			_currentCapture = capture;

			// Prepare results
			NSInteger resultsCount = _currentCapture.capturedResultsCount;
			NSRange resultsRange = NSMakeRange(_actionResults.count - resultsCount, resultsCount);
			
			if (resultsCount) {
				NSLog(@"%li %@ %li", _actionResults.count, _actionResults, resultsCount);
				
				// Read all results
				capture.allResults = [_actionResults subarrayWithRange: resultsRange];
				capture.nextIndex = 0;
				
				// Remove results from stack
				[_actionResults removeObjectsInRange: resultsRange];
			}
			
			id result = capture.action(self, [self yyText:capture.begin to:capture.end]);
			if (result)
				[self pushResult: result];
		}
		
		// Provide final result if any
		if (_actionResults.count)
			if (result) *result = _actionResults.lastObject;
	}
	
    // Cleanup parser
    _string = nil;
    _cstring = nil;
	_actionResults = nil;
		
	return matched;
}

- (BOOL)parseString:(NSString *)string
{
	return [self parseString:string usingResult:NULL];
}


#pragma mark - Helper methods

- (NSInteger)lineNumberForIndex:(NSInteger)index
{
	__block NSInteger line = 0;
	
	[_string enumerateSubstringsInRange:NSMakeRange(0, index >= _string.length ? _string.length-1 : index) options:NSStringEnumerationByLines|NSStringEnumerationSubstringNotRequired usingBlock:^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) {
		line ++;
	}];
	
	return line;
}

- (NSInteger)columnNumberForIndex:(NSInteger)index
{
	return index - [_string lineRangeForRange: NSMakeRange(index >= _string.length ? _string.length-1 : index, 1)].location;
}

- (NSString *)positionDescriptionForIndex:(NSInteger)index
{
	return [NSString stringWithFormat: @"line: %li, column: %li", [self lineNumberForIndex: index], [self columnNumberForIndex: index]];
}

@end
